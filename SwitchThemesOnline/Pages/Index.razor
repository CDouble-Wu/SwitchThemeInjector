@page "/"
@using SwitchThemes.Common;
@inject IJSRuntime js;

<p>Welcome to the new WebInjector, this version can only build .nxtheme files. (You can still go to the <a href="https://exelix11.github.io/SwitchThemeInjector/">old version</a>)</p>
<h5>What is .nxtheme ?</h5>
<p>
	.nxtheme is a custom file format for themes, it's legal to share and works on most firmwares.<br>
	To install nxtheme files you need to download <a href="https://github.com/exelix11/SwitchThemeInjector/releases">NXThemes Installer</a> on your console. <br />
	All the cumbersome parts of the process have been automated, now all you need to do is to launch the installer and select a theme !
</p>

<h3>Enough ! Let's make a theme:</h3>

<SwitchThemesOnline.Pages.EditorComponents.PropertiesInput state="@holder" />
<SwitchThemesOnline.Pages.EditorComponents.BGSelect state="@holder" />
<SwitchThemesOnline.Pages.EditorComponents.LayoutUpload state="@holder" />

<br /> <br /> <br />
<button class="btn--raised btn--green buttonCenter" @onclick="@BuildNxtheme">Build nxtheme !</button>

@if (PrintAlert != null)
{
	<p>@PrintAlert</p>
}

@code
{
	StateHolder holder = new StateHolder();

	string PrintAlert = null;

	async Task BuildNxtheme()
	{
		try
		{
			NXThemeBuilder nx = new NXThemeBuilder(holder.Target, holder.Name, holder.Author);
			nx.AddMainBg(holder.MainBG);
			nx.AddMainLayout(holder.MainLayout);

			if (js is Mono.WebAssembly.Interop.MonoWebAssemblyJSRuntime)
				((Mono.WebAssembly.Interop.MonoWebAssemblyJSRuntime)js).DownloadFile($"{holder.Name}.nxtheme", nx.GetNxtheme());
			else
			{
				Console.WriteLine("Falling back to legacy download mode !");
				await js.LegacyDownloadFile($"{holder.Name}.nxtheme", nx.GetNxtheme());
				PrintAlert = "For some reason your browser seems to use the legacy download mode for themes, this is not an issue but it should be reported.";
				StateHasChanged();
			}
		}
		catch (Exception ex)
		{
			await js.Alert("Error: " + ex.Message);
		}
	}
}
